

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13386 = Integer(13386); _sage_const_0 = Integer(0); _sage_const_6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131 = Integer(6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131); _sage_const_3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261 = Integer(3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261); _sage_const_6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704 = Integer(6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704); _sage_const_256 = Integer(256); _sage_const_5 = Integer(5); _sage_const_1 = Integer(1)
from Crypto.Util.number import *
from pwn import remote

r = remote("socket.cryptohack.org",_sage_const_13386 )

r.sendline(b'{"option":"get_flag"}')
print(r.recvline())
exit(_sage_const_0 )


N = _sage_const_6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131 
c1 = _sage_const_3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261 
c2 = _sage_const_6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704 



for r in range(_sage_const_256 ):
    R = PolynomialRing(Zmod(N), names=('X',)); (X,) = R._first_ngens(1)

    f1 = (X) ** _sage_const_5  - c2
    f2 = (X*_sage_const_256  + r) ** _sage_const_5  - c1

    def my_gcd(a, b): 
        return a.monic() if b == _sage_const_0  else my_gcd(b, a % b)

    f = my_gcd(f1, f2)
    print(f)
    flag = f.coefficients()[_sage_const_0 ]

    flag = int(flag) * inverse(-_sage_const_1 , N) % N
    if b'AKASEC' in long_to_bytes(int(flag)):
        print(long_to_bytes(int(flag)))




# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_497 = Integer(497); _sage_const_1768 = Integer(1768); _sage_const_9739 = Integer(9739); _sage_const_493 = Integer(493); _sage_const_5564 = Integer(5564); _sage_const_1539 = Integer(1539); _sage_const_4742 = Integer(4742); _sage_const_4403 = Integer(4403); _sage_const_5202 = Integer(5202)
def ecc_add(points, a, b, p):
    F = GF(p)
    E = EllipticCurve(F, [a, b])
    curve_points = [E(point) for point in points]
    result = curve_points[_sage_const_0 ]
    for pt in curve_points[_sage_const_1 :]:
        result+= pt
    return (int(result[_sage_const_0 ]), int(result[_sage_const_1 ]))


a = _sage_const_497 
b = _sage_const_1768 
p = _sage_const_9739 

P = (_sage_const_493 , _sage_const_5564 )
Q = (_sage_const_1539 , _sage_const_4742 )
R = (_sage_const_4403 , _sage_const_5202 )

S = ecc_add([P, P, Q, R], a, b, p)
print(f"crypto{{{S[_sage_const_0 ]},{S[_sage_const_1 ]}}}")


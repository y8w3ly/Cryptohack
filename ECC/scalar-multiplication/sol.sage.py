

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9739 = Integer(9739); _sage_const_497 = Integer(497); _sage_const_1768 = Integer(1768); _sage_const_2339 = Integer(2339); _sage_const_2213 = Integer(2213); _sage_const_7863 = Integer(7863); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
E = EllipticCurve(GF(_sage_const_9739 ), [_sage_const_497 , _sage_const_1768 ])
#To define an elliptic curve, we use the EllipticCurve function
#which takes as arguments, the fiels which must be GF(p)
#the other argument is[a,b]
#given E:Y2=X3+aX+b % p

#To define a point in the curve we use this:
P = E(_sage_const_2339 ,_sage_const_2213 )
n = _sage_const_7863 
Q = P
R = None
while n>_sage_const_0 :
	if n % _sage_const_2  ==_sage_const_1 :
		if R:
			R+=Q
		else:
			R=Q
	Q += Q
	n = n //_sage_const_2 
print(f"crypto{{{R[_sage_const_0 ]},{R[_sage_const_1 ]}}}")	




# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4368590184733545720227961182704359358435747188309319510520316493183539079703 = Integer(4368590184733545720227961182704359358435747188309319510520316493183539079703); _sage_const_8742397231329873984594235438374590234800923467289367269837473862487362482 = Integer(8742397231329873984594235438374590234800923467289367269837473862487362482); _sage_const_225987949353410341392975247044711665782695329311463646299187580326445253608 = Integer(225987949353410341392975247044711665782695329311463646299187580326445253608); _sage_const_2582928974243465355371953056699793745022552378548418288211138499777818633265 = Integer(2582928974243465355371953056699793745022552378548418288211138499777818633265); _sage_const_2421683573446497972507172385881793260176370025964652384676141384239699096612 = Integer(2421683573446497972507172385881793260176370025964652384676141384239699096612); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3)
p = _sage_const_4368590184733545720227961182704359358435747188309319510520316493183539079703 
#a is unknown
#b is unknown


gx = _sage_const_8742397231329873984594235438374590234800923467289367269837473862487362482 
gy = _sage_const_225987949353410341392975247044711665782695329311463646299187580326445253608 
G = (gx,gy)

# Point(x=2582928974243465355371953056699793745022552378548418288211138499777818633265, y=2421683573446497972507172385881793260176370025964652384676141384239699096612)
#The point above is Q, which is [d]G and d is the secret we are looking for.
qx = _sage_const_2582928974243465355371953056699793745022552378548418288211138499777818633265 
qy = _sage_const_2421683573446497972507172385881793260176370025964652384676141384239699096612 
Q = (qx,qy)
#I asket deepseek for a function that I give it two points and p and it return a and b

gy_sq = (pow(gy, _sage_const_2 , p))
qy_sq = (pow(qy, _sage_const_2 , p))
gx_cu = (pow(gx, _sage_const_3 , p))
qx_cu = (pow(qx, _sage_const_3 , p))

numerator = (gy_sq - qy_sq) - (gx_cu - qx_cu)
numerator %= p
denominator = (gx - qx) % p
denominator_inv = inverse_mod(denominator, p)
a = (numerator * denominator_inv) % p
b = (gy_sq - gx_cu - a * gx) % p
E = EllipticCurve(GF(p), [a, b])


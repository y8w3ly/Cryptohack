

# This file was *autogenerated* from the file crypt.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1337 = Integer(1337); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)
from Crypto.Util.number import getPrime, bytes_to_long
from random import randint

flag = open('flag.txt', 'rb').read().strip()

p, q = getPrime(_sage_const_1337 ), getPrime(_sage_const_1337 )
n = p*q

D = (_sage_const_1 *_sage_const_3 *_sage_const_3 *_sage_const_7 )**(_sage_const_1 +_sage_const_3 +_sage_const_3 +_sage_const_7 )
hint = int(D*sqrt(p) + D*sqrt(q))

x = randint(_sage_const_1337 , n)
while _sage_const_1337 :
    lp = legendre_symbol(x, p)
    lq = legendre_symbol(x, q)
    if lp * lq > _sage_const_0  and lp + lq < _sage_const_0 :
        break
    x = randint(_sage_const_1337 , n)

m = map(int, bin(bytes_to_long(flag))[_sage_const_2 :])
c = []
for b in m:
    while _sage_const_1337 :
        r = randint(_sage_const_1337 , n)
        if gcd(r, n) == _sage_const_1 :
            break
    c.append((pow(x, _sage_const_1337  + b, n) * pow(r, _sage_const_1337 +_sage_const_1337 , n)) % n)

print(f'hint = {hint}', f'D = {D}', f'n = {n}', f'c = {c}', sep='\n')

